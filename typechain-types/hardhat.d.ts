/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "CrossChainAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossChainAdapter__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IYieldSourceView",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYieldSourceView__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ISatsumaLPVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISatsumaLPVault__factory>;
    getContractFactory(
      name: "SatsumaAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SatsumaAdapter__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IZentraPoolV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZentraPoolV2__factory>;
    getContractFactory(
      name: "ZentraAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZentraAdapter__factory>;
    getContractFactory(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStrategy__factory>;
    getContractFactory(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBridge__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IUSDC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUSDC__factory>;
    getContractFactory(
      name: "IWcBTC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWcBTC__factory>;
    getContractFactory(
      name: "IYieldSourceView",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYieldSourceView__factory>;
    getContractFactory(
      name: "IZentraPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZentraPool__factory>;
    getContractFactory(
      name: "LavaCrossChainVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LavaCrossChainVault__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IWcBTC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWcBTC__factory>;
    getContractFactory(
      name: "LavaPortfolioVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LavaPortfolioVault__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceOracle__factory>;
    getContractFactory(
      name: "ISatsumaRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISatsumaRouter__factory>;
    getContractFactory(
      name: "IUSDC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUSDC__factory>;
    getContractFactory(
      name: "IWcBTC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWcBTC__factory>;
    getContractFactory(
      name: "IZentraPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZentraPool__factory>;
    getContractFactory(
      name: "LavaMaximizedVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LavaMaximizedVault__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IYieldSource",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYieldSource__factory>;
    getContractFactory(
      name: "MockBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBridge__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "MockInstitutionalYieldSource",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockInstitutionalYieldSource__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "MockSatsumaLPVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSatsumaLPVault__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "MockSatsumaRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSatsumaRouter__factory>;
    getContractFactory(
      name: "MockUSDC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUSDC__factory>;
    getContractFactory(
      name: "MockWcBTC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockWcBTC__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IZToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZToken__factory>;
    getContractFactory(
      name: "MockZentraPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockZentraPool__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "MockZentraPoolV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockZentraPoolV2__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ISatsumaLPVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISatsumaLPVault__factory>;
    getContractFactory(
      name: "IWcBTC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWcBTC__factory>;
    getContractFactory(
      name: "IZentraPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZentraPool__factory>;
    getContractFactory(
      name: "IZToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IZToken__factory>;
    getContractFactory(
      name: "LavaOptimizedVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LavaOptimizedVault__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;

    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "CrossChainAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossChainAdapter>;
    getContractAt(
      name: "IBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridge>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IYieldSourceView",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IYieldSourceView>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ISatsumaLPVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISatsumaLPVault>;
    getContractAt(
      name: "SatsumaAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SatsumaAdapter>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IZentraPoolV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IZentraPoolV2>;
    getContractAt(
      name: "ZentraAdapter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ZentraAdapter>;
    getContractAt(
      name: "IStrategy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStrategy>;
    getContractAt(
      name: "IBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBridge>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IUSDC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUSDC>;
    getContractAt(
      name: "IWcBTC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWcBTC>;
    getContractAt(
      name: "IYieldSourceView",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IYieldSourceView>;
    getContractAt(
      name: "IZentraPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IZentraPool>;
    getContractAt(
      name: "LavaCrossChainVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LavaCrossChainVault>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IWcBTC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWcBTC>;
    getContractAt(
      name: "LavaPortfolioVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LavaPortfolioVault>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IPriceOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceOracle>;
    getContractAt(
      name: "ISatsumaRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISatsumaRouter>;
    getContractAt(
      name: "IUSDC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUSDC>;
    getContractAt(
      name: "IWcBTC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWcBTC>;
    getContractAt(
      name: "IZentraPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IZentraPool>;
    getContractAt(
      name: "LavaMaximizedVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LavaMaximizedVault>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IYieldSource",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IYieldSource>;
    getContractAt(
      name: "MockBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBridge>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "MockInstitutionalYieldSource",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockInstitutionalYieldSource>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "MockSatsumaLPVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSatsumaLPVault>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "MockSatsumaRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockSatsumaRouter>;
    getContractAt(
      name: "MockUSDC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockUSDC>;
    getContractAt(
      name: "MockWcBTC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockWcBTC>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IZToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IZToken>;
    getContractAt(
      name: "MockZentraPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockZentraPool>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "MockZentraPoolV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockZentraPoolV2>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ISatsumaLPVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISatsumaLPVault>;
    getContractAt(
      name: "IWcBTC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWcBTC>;
    getContractAt(
      name: "IZentraPool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IZentraPool>;
    getContractAt(
      name: "IZToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IZToken>;
    getContractAt(
      name: "LavaOptimizedVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LavaOptimizedVault>;
    getContractAt(
      name: "MockERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;

    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "CrossChainAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CrossChainAdapter>;
    deployContract(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridge>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IYieldSourceView",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IYieldSourceView>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ISatsumaLPVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISatsumaLPVault>;
    deployContract(
      name: "SatsumaAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SatsumaAdapter>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IZentraPoolV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZentraPoolV2>;
    deployContract(
      name: "ZentraAdapter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZentraAdapter>;
    deployContract(
      name: "IStrategy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategy>;
    deployContract(
      name: "IBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridge>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IUSDC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUSDC>;
    deployContract(
      name: "IWcBTC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWcBTC>;
    deployContract(
      name: "IYieldSourceView",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IYieldSourceView>;
    deployContract(
      name: "IZentraPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZentraPool>;
    deployContract(
      name: "LavaCrossChainVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LavaCrossChainVault>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IWcBTC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWcBTC>;
    deployContract(
      name: "LavaPortfolioVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LavaPortfolioVault>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IPriceOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceOracle>;
    deployContract(
      name: "ISatsumaRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISatsumaRouter>;
    deployContract(
      name: "IUSDC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUSDC>;
    deployContract(
      name: "IWcBTC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWcBTC>;
    deployContract(
      name: "IZentraPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZentraPool>;
    deployContract(
      name: "LavaMaximizedVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LavaMaximizedVault>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IYieldSource",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IYieldSource>;
    deployContract(
      name: "MockBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockBridge>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MockInstitutionalYieldSource",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockInstitutionalYieldSource>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MockSatsumaLPVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockSatsumaLPVault>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MockSatsumaRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockSatsumaRouter>;
    deployContract(
      name: "MockUSDC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockUSDC>;
    deployContract(
      name: "MockWcBTC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockWcBTC>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IZToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZToken>;
    deployContract(
      name: "MockZentraPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockZentraPool>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MockZentraPoolV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockZentraPoolV2>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ISatsumaLPVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISatsumaLPVault>;
    deployContract(
      name: "IWcBTC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWcBTC>;
    deployContract(
      name: "IZentraPool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZentraPool>;
    deployContract(
      name: "IZToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZToken>;
    deployContract(
      name: "LavaOptimizedVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LavaOptimizedVault>;
    deployContract(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;

    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "CrossChainAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CrossChainAdapter>;
    deployContract(
      name: "IBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridge>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IYieldSourceView",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IYieldSourceView>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ISatsumaLPVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISatsumaLPVault>;
    deployContract(
      name: "SatsumaAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SatsumaAdapter>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IZentraPoolV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZentraPoolV2>;
    deployContract(
      name: "ZentraAdapter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ZentraAdapter>;
    deployContract(
      name: "IStrategy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStrategy>;
    deployContract(
      name: "IBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBridge>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IUSDC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUSDC>;
    deployContract(
      name: "IWcBTC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWcBTC>;
    deployContract(
      name: "IYieldSourceView",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IYieldSourceView>;
    deployContract(
      name: "IZentraPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZentraPool>;
    deployContract(
      name: "LavaCrossChainVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LavaCrossChainVault>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IWcBTC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWcBTC>;
    deployContract(
      name: "LavaPortfolioVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LavaPortfolioVault>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IPriceOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPriceOracle>;
    deployContract(
      name: "ISatsumaRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISatsumaRouter>;
    deployContract(
      name: "IUSDC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUSDC>;
    deployContract(
      name: "IWcBTC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWcBTC>;
    deployContract(
      name: "IZentraPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZentraPool>;
    deployContract(
      name: "LavaMaximizedVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LavaMaximizedVault>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IYieldSource",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IYieldSource>;
    deployContract(
      name: "MockBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockBridge>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MockInstitutionalYieldSource",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockInstitutionalYieldSource>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MockSatsumaLPVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockSatsumaLPVault>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MockSatsumaRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockSatsumaRouter>;
    deployContract(
      name: "MockUSDC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockUSDC>;
    deployContract(
      name: "MockWcBTC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockWcBTC>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IZToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZToken>;
    deployContract(
      name: "MockZentraPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockZentraPool>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "MockZentraPoolV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockZentraPoolV2>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ISatsumaLPVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISatsumaLPVault>;
    deployContract(
      name: "IWcBTC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWcBTC>;
    deployContract(
      name: "IZentraPool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZentraPool>;
    deployContract(
      name: "IZToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IZToken>;
    deployContract(
      name: "LavaOptimizedVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LavaOptimizedVault>;
    deployContract(
      name: "MockERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockERC20>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
