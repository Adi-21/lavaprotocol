/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface MockBridgeInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bridgeIn"
      | "bridgeOut"
      | "bridgedBalance"
      | "forwardToYieldSource"
      | "owner"
      | "pullFromYieldSource"
      | "renounceOwnership"
      | "setYieldSource"
      | "transferOwnership"
      | "yieldSource"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgedIn"
      | "BridgedOut"
      | "OwnershipTransferred"
      | "YieldSourceSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bridgeIn",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeOut",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgedBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "forwardToYieldSource",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pullFromYieldSource",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setYieldSource",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldSource",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "bridgeIn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgedBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwardToYieldSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pullFromYieldSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setYieldSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldSource",
    data: BytesLike
  ): Result;
}

export namespace BridgedInEvent {
  export type InputTuple = [
    token: AddressLike,
    amount: BigNumberish,
    recipient: AddressLike
  ];
  export type OutputTuple = [token: string, amount: bigint, recipient: string];
  export interface OutputObject {
    token: string;
    amount: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BridgedOutEvent {
  export type InputTuple = [token: AddressLike, amount: BigNumberish];
  export type OutputTuple = [token: string, amount: bigint];
  export interface OutputObject {
    token: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace YieldSourceSetEvent {
  export type InputTuple = [yieldSource: AddressLike];
  export type OutputTuple = [yieldSource: string];
  export interface OutputObject {
    yieldSource: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockBridge extends BaseContract {
  connect(runner?: ContractRunner | null): MockBridge;
  waitForDeployment(): Promise<this>;

  interface: MockBridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bridgeIn: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;

  bridgeOut: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  bridgedBalance: TypedContractMethod<[token: AddressLike], [bigint], "view">;

  forwardToYieldSource: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pullFromYieldSource: TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setYieldSource: TypedContractMethod<
    [_yieldSource: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  yieldSource: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bridgeIn"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish, recipient: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bridgeOut"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bridgedBalance"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "forwardToYieldSource"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pullFromYieldSource"
  ): TypedContractMethod<
    [token: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setYieldSource"
  ): TypedContractMethod<[_yieldSource: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "yieldSource"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BridgedIn"
  ): TypedContractEvent<
    BridgedInEvent.InputTuple,
    BridgedInEvent.OutputTuple,
    BridgedInEvent.OutputObject
  >;
  getEvent(
    key: "BridgedOut"
  ): TypedContractEvent<
    BridgedOutEvent.InputTuple,
    BridgedOutEvent.OutputTuple,
    BridgedOutEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "YieldSourceSet"
  ): TypedContractEvent<
    YieldSourceSetEvent.InputTuple,
    YieldSourceSetEvent.OutputTuple,
    YieldSourceSetEvent.OutputObject
  >;

  filters: {
    "BridgedIn(address,uint256,address)": TypedContractEvent<
      BridgedInEvent.InputTuple,
      BridgedInEvent.OutputTuple,
      BridgedInEvent.OutputObject
    >;
    BridgedIn: TypedContractEvent<
      BridgedInEvent.InputTuple,
      BridgedInEvent.OutputTuple,
      BridgedInEvent.OutputObject
    >;

    "BridgedOut(address,uint256)": TypedContractEvent<
      BridgedOutEvent.InputTuple,
      BridgedOutEvent.OutputTuple,
      BridgedOutEvent.OutputObject
    >;
    BridgedOut: TypedContractEvent<
      BridgedOutEvent.InputTuple,
      BridgedOutEvent.OutputTuple,
      BridgedOutEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "YieldSourceSet(address)": TypedContractEvent<
      YieldSourceSetEvent.InputTuple,
      YieldSourceSetEvent.OutputTuple,
      YieldSourceSetEvent.OutputObject
    >;
    YieldSourceSet: TypedContractEvent<
      YieldSourceSetEvent.InputTuple,
      YieldSourceSetEvent.OutputTuple,
      YieldSourceSetEvent.OutputObject
    >;
  };
}
