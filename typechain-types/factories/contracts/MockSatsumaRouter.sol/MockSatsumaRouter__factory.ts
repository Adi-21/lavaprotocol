/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockSatsumaRouter,
  MockSatsumaRouterInterface,
} from "../../../contracts/MockSatsumaRouter.sol/MockSatsumaRouter";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "exactInputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060f58061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063c1b2f52814602d575b600080fd5b604060383660046052565b600092915050565b60405190815260200160405180910390f35b60008060208385031215606457600080fd5b823567ffffffffffffffff80821115607b57600080fd5b818501915085601f830112608e57600080fd5b813581811115609c57600080fd5b86602082850101111560ad57600080fd5b6020929092019691955090935050505056fea2646970667358221220aba53d5c3dc031c466dc3a8e0f4a1a3ac0bf468e14c9d604c271c14794fd0e0f64736f6c63430008140033";

type MockSatsumaRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockSatsumaRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSatsumaRouter__factory extends ContractFactory {
  constructor(...args: MockSatsumaRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockSatsumaRouter & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockSatsumaRouter__factory {
    return super.connect(runner) as MockSatsumaRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSatsumaRouterInterface {
    return new Interface(_abi) as MockSatsumaRouterInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockSatsumaRouter {
    return new Contract(address, _abi, runner) as unknown as MockSatsumaRouter;
  }
}
